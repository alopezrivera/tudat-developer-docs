
Release Versioning
==================

.. _`Developer Primer`: https://github.com/tudat-team/developer-primer.git

The release versioning section describes the workflow and tools used in release
versioning used as a Tudat Developer.

.. admonition:: :fa:`graduation-cap` Learning Objectives

    1. Understand what "dependency hell" is and how to avoid it.
    2. Understand ``MAJOR.MINOR.PATCH`` and when each of them are bumped.
    3. Understand what happens when ``rever <new_version_number>`` is executed.
    4. Understand how to maintain the automated changelog.

Semantic Versioning
-------------------

    In the world of software management there exists a dreaded place called
    “dependency hell.” The bigger your system grows and the more packages you
    integrate into your software, the more likely you are to find yourself, one
    day, in this pit of despair. :cite:p:`preston-werner`

Given a version number ``MAJOR.MINOR.PATCH``, increment the:

- ``MAJOR`` version when you make incompatible API changes,
- ``MINOR`` version when you add functionality in a backwards compatible manner, and
- ``PATCH`` version when you make backwards compatible bug fixes.

Additional labels for pre-release and build metadata are available as extensions to the ``MAJOR.MINOR.PATCH`` format.

Rever: Releaser of Versions!
----------------------------

Rever is a xonsh-powered (a language hybrid between bash script and Python),
cross-platform software release tool. It automates standard activities that are
carried out during a new release. It is important to be aware of these
activities, as they are not only relevant at the moment of release.
The tasks relevant as a Tudat Developer are:

- ``authors``
- ``version_bump``
- ``changelog``
- ``tag``
- ``push_tag``
- ``bibtex``

These tasks will be elaborated upon, one-by-one in the following subsections.
Note that Rever will most likely already be set up in Tudat Team repositories
that you encounter, therefore the explicit procedure of `Initializing Rever`_
will not be covered here, though the content is covered.

.. _`Initalizing Rever`: https://regro.github.io/rever-docs/index.html#initializing-rever

.. panels::
    :column: col-lg-12 p-0
    :header: text-secondary font-weight-bold

    :fa:`terminal` **Try it yourself!**

    ^^^

    Inside the ``developer-primer`` :cite:p:`developer-primer0.0.1` repository used in :ref:`Code Collaboration`,
    you will find files that are used to configure Rever and some that are
    autogenerated or updated when executing a release.

    .. code-block:: text
       :linenos:
       :emphasize-lines: 2-7,16,17,19

        developer-primer
        ├── .authors
        │   ├── AUTHORS
        │   ├── .authors.yml
        │   └── .mailmap
        ├── bibtex.bib
        ├── CHANGELOG.rst
        ├── docs
        │   ├── build
        │   ├── make.bat
        │   ├── Makefile
        │   └── source
        ├── environment.yaml
        ├── .gitignore
        ├── LICENSE
        ├── news
        │   └── TEMPLATE.rst
        ├── README.rst
        ├── rever.xsh
        └── source
            └── tree_trunk.txt

    The highlighted lines indicate the relevant components of the repository
    which relate to Rever configuration and activities. Grouped by their
    activity:

    +---------------+---------------------+
    | Activity      | Components          |
    +---------------+---------------------+
    | ``authors``   | - ``.authors/*``    |
    +---------------+---------------------+
    | ``bibtex``    | - ``bibtex.bib``    |
    +---------------+---------------------+
    | ``changelog`` | - ``news/*``        |
    |               | - ``CHANGELOG.rst`` |
    +---------------+---------------------+

    Finally, the ``rever.xsh`` is the configuration file for Rever.

.. admonition:: Example

    Inside the ``developer-primer`` :cite:p:`developer-primer0.0.1` repository used in :ref:`Code Collaboration`,
    you will find files that are used to configure Rever and some that are
    autogenerated or updated when executing a release.

    .. code-block:: text
       :linenos:
       :emphasize-lines: 2-7,16,17,19

        developer-primer
        ├── .authors
        │   ├── AUTHORS
        │   ├── .authors.yml
        │   └── .mailmap
        ├── bibtex.bib
        ├── CHANGELOG.rst
        ├── docs
        │   ├── build
        │   ├── make.bat
        │   ├── Makefile
        │   └── source
        ├── environment.yaml
        ├── .gitignore
        ├── LICENSE
        ├── news
        │   └── TEMPLATE.rst
        ├── README.rst
        ├── rever.xsh
        └── source
            └── tree_trunk.txt

    The highlighted lines indicate the relevant components of the repository
    which relate to Rever configuration and activities. Grouped by their
    activity:

    +---------------+---------------------+
    | Activity      | Components          |
    +---------------+---------------------+
    | ``authors``   | - ``.authors/*``    |
    +---------------+---------------------+
    | ``bibtex``    | - ``bibtex.bib``    |
    +---------------+---------------------+
    | ``changelog`` | - ``news/*``        |
    |               | - ``CHANGELOG.rst`` |
    +---------------+---------------------+

    Finally, the ``rever.xsh`` is the configuration file for Rever.

Configuration: ``rever.xsh``
****************************

.. todo::
       @Developers, is it too much to show the entire file here before going
       through it step by step?

.. code-block:: bash

       $PROJECT = 'developer-primer'
       $ACTIVITIES = [
           'authors',
           'version_bump',
           'changelog',
           'tag',
           'push_tag',
           'bibtex'
       ]

       # VersionBump related ------------------------------------------------------- #
       $VERSION_BUMP_PATTERNS = [
           ('README.rst', r'\sVersion:\*\*\s.*', '\sVersion:** $VERSION'),
           ('docs/source/conf.py', r'release\s=\s.*', "release = '$VERSION'"),
           ('docs/source/index.rst', r'\sVersion:\*\*\s.*', '\sVersion:** $VERSION'),
       ]

       # Changelog related --------------------------------------------------------- #
       $CHANGELOG_FILENAME = 'CHANGELOG.rst'  # Filename for the changelog
       $CHANGELOG_TEMPLATE = 'TEMPLATE.rst'  # Filename for the news template

       # BibTex related ------------------------------------------------------------ #
       $BIBTEX_AUTHORS = 'G.H. Garrett'
       $BIBTEX_URL = 'https://github.com/tudat-team/developer-primer'

       # Authors related ----------------------------------------------------------- #
       $AUTHORS_DIR = ".authors"  # this is custom
       $AUTHORS_FILENAME = $AUTHORS_DIR + '/' + 'AUTHORS'
       $AUTHORS_TEMPLATE = '\n{authors}\n'
       $AUTHORS_LATEST = '$REVER_DIR/LATEST-AUTHORS.json'
       $AUTHORS_METADATA = $AUTHORS_DIR + '/' + '.authors.yml'
       $AUTHORS_MAILMAP = $AUTHORS_DIR + '/' + '.mailmap'

       # PushTag related ----------------------------------------------------------- #
       $PUSH_TAG_REMOTE = 'git@github.com:tudat-team/developer-primer.git'

Activity: ``authors``
*********************

.. _`Rever`: https://regro.github.io/rever-docs/

Activity: ``version_bump``
**************************

``.authors.yml``

Activity: ``changelog``
***********************

Activity: ``tag``
*****************

Activity: ``push_tag``
**********************

Activity: ``bibtex``
********************

News Workflow
***************

One of the most helpful features of rever is the changelog activity.
This activity produces a changelog by colating news files. The changelog is
written into the repo and can be used in the GitHub release activity.

.. important:: Ensure that you have one commit prior to executing
        ``rever <MAJOR.MINOR.PATCH>``, otherwise you will not appear as an
        author on the Change Log.

1. Go into the ``news/`` directory

2. Copy the ``TEMPLATE.rst`` file to another file in the ``news/`` directory. We suggest using the branchname:

.. code-block:: bash

    $ cp TEMPLATE.rst branch.rst

3. The news files are customizable in the ``rever.xsh`` files. However, the default template looks like:

.. code-block:: md

    **Added:**

    * <news item>

    **Changed:**

    * <news item>

    **Deprecated:**

    * <news item>

    **Removed:**

    * <news item>

    **Fixed:**

    * <news item>

    **Security:**

    * <news item>

4. In this case you can remove the ``* <news item>`` and replace it with your own news entries, e.g.:

.. code-block:: md

    **Added:**

    * New news template tutorial

    **Changed:**

    * <news item>

    **Deprecated:**

    * <news item>

    **Removed:**

    * <news item>

    **Fixed:**

    * <news item>

    **Security:**

    * <news item>

4. Commit your ``branch.rst``.

Feel free to update this file whenever you want! Please don’t use someone
else’s file name. All of the files in this news/ directory will be merged
automatically at release time. The <news item> entries will be automatically
filtered out too!

Once the project is ready for a release when running the rever command all the
files, except the template, in the news folder will be collated and merged into
a single changelog file.